import React, { useState, useEffect } from 'react';
import { router } from 'expo-router';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView, Dimensions, Animated, Alert, TextInput } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { MaterialIcons, FontAwesome5, Ionicons, Feather, Entypo } from '@expo/vector-icons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import CategoryPill from './CategoryPill';
import { categoryColors, categoryIcons, categoryLimits, Category } from './categories';
import { formatDate } from '../utils/dateFormatter';
import { DailyDataManager } from '../utils/dailyDataManager';
import { useCurrency } from '../context/CurrencyContext';
import { useTheme } from '../context/ThemeContext';

// Generated by Copilot
interface Transaction {
  id: number;
  type: 'income' | 'expense';
  amount: number;
  category: Category;
  date: string;
  description: string;
}

const { width } = Dimensions.get('window');

const FinanceDashboard = () => {
  const [showAllCategories, setShowAllCategories] = useState(false);
  const [balance, setBalance] = useState(0);
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [newAmount, setNewAmount] = useState('');
  const [newDescription, setNewDescription] = useState('');
  const [selectedType, setSelectedType] = useState<Transaction['type']>('expense');
  const [selectedCategory, setSelectedCategory] = useState<Category>('Other');
  const [animation] = useState(new Animated.Value(0));
  const [showFilters, setShowFilters] = useState(false);
  const [activeFilters, setActiveFilters] = useState<{
    type?: 'income' | 'expense';
    category?: Category;
    dateRange?: 'today' | 'week' | 'month' | 'all';
  }>({});
  const [dailyBalance, setDailyBalance] = useState(0);
  const [totalBalance, setTotalBalance] = useState(0);
  const { currency } = useCurrency();
  const { theme } = useTheme();

  useEffect(() => {
    const initializeData = async () => {
      // Günü başlat
      const currentDay = await DailyDataManager.initializeDay();
      if (currentDay) {
        setDailyBalance(currentDay.dailyBalance);
        setTransactions(currentDay.transactions.map(t => ({
          ...t,
          category: t.category as Category
        })));
      }

      // Toplam bakiyeyi hesapla
      const allTimeBalance = await DailyDataManager.getAllTimeBalance();
      setTotalBalance(allTimeBalance);
    };

    initializeData();
  }, []);

  useEffect(() => {
    const loadTransactions = async () => {
      try {
        const savedTransactions = await AsyncStorage.getItem('transactions');
        if (savedTransactions) {
          setTransactions(JSON.parse(savedTransactions));
        }
      } catch (error) {
        console.error('Error loading transactions:', error);
      }
    };
    loadTransactions();
  }, []);

  useEffect(() => {
    const saveTransactions = async () => {
      try {
        await AsyncStorage.setItem('transactions', JSON.stringify(transactions));
      } catch (error) {
        console.error('Error saving transactions:', error);
      }
    };
    saveTransactions();
  }, [transactions]);

  useEffect(() => {
    const newBalance = transactions.reduce((acc, transaction) => {
      return acc + (transaction.type === 'income' ? transaction.amount : -transaction.amount);
    }, 0);
    setBalance(newBalance);
  }, [transactions]);

  useEffect(() => {
    Animated.spring(animation, {
      toValue: 1,
      useNativeDriver: true,
    }).start();
  }, []);

  const addTransaction = async () => {
    if (!newAmount || isNaN(Number(newAmount))) {
      Alert.alert('Error', 'Please enter a valid amount');
      return;
    }

    const amount = Number(newAmount);
    if (amount <= 0) {
      Alert.alert('Error', 'Amount must be greater than 0');
      return;
    }

    if (!newDescription) {
      Alert.alert('Error', 'Please enter a description');
      return;
    }

    const newTransaction: Transaction = {
      id: Date.now(),
      type: selectedType,
      amount: amount,
      category: selectedCategory,
      date: new Date().toISOString(),
      description: newDescription
    };

    // Günlük verileri güncelle
    const updatedDay = await DailyDataManager.addTransaction(newTransaction);
    if (updatedDay) {
      setDailyBalance(updatedDay.dailyBalance);
      setTransactions(updatedDay.transactions.map(t => ({
        ...t,
        category: t.category as Category
      })));
      
      // Toplam bakiyeyi güncelle
      const newTotalBalance = await DailyDataManager.getAllTimeBalance();
      setTotalBalance(newTotalBalance);
    }

    setNewAmount('');
    setNewDescription('');
    setSelectedCategory('Other');
    setSelectedType('expense');
  };

  const getFilteredTransactions = () => {
    return transactions.filter(transaction => {
      if (activeFilters.type && transaction.type !== activeFilters.type) {
        return false;
      }
      if (activeFilters.category && transaction.category !== activeFilters.category) {
        return false;
      }
      if (activeFilters.dateRange) {
        const today = new Date();
        const transactionDate = new Date(transaction.date);
        switch (activeFilters.dateRange) {
          case 'today':
            return transactionDate.toDateString() === today.toDateString();
          case 'week':
            const weekAgo = new Date(today.setDate(today.getDate() - 7));
            return transactionDate >= weekAgo;
          case 'month':
            const monthAgo = new Date(today.setMonth(today.getMonth() - 1));
            return transactionDate >= monthAgo;
          default:
            return true;
        }
      }
      return true;
    });
  };

  const formatAmount = (amount: number) => {
    return `${currency.symbol}${amount.toFixed(2)}`;
  };

  const renderCategorySelector = () => (
    <View style={styles.categorySelector}>
      <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.categoryList}>
        {Object.keys(categoryColors).map((category) => (
          <TouchableOpacity
            key={category}
            onPress={() => setSelectedCategory(category as Category)}
            style={[
              styles.categoryOption,
              {
                backgroundColor: selectedCategory === category ? categoryColors[category as Category] : '#FFFFFF',
              },
            ]}
          >
            <FontAwesome5
              name={categoryIcons[category as keyof typeof categoryIcons]}
              size={24}
              color={selectedCategory === category ? 'white' : '#2C3E50'}
            />
            <Text
              style={[
                styles.categoryOptionText,
                { color: selectedCategory === category ? 'white' : '#2C3E50' },
              ]}
            >
              {category}
            </Text>
          </TouchableOpacity>
        ))}
      </ScrollView>
    </View>
  );

  const renderAddTransactionForm = () => (
    <View style={styles.addTransactionForm}>
      <View style={styles.typeSelector}>
        <TouchableOpacity
          style={[
            styles.typeButton,
            { backgroundColor: selectedType === 'expense' ? '#FF5252' : '#FFFFFF' },
          ]}
          onPress={() => setSelectedType('expense')}
        >
          <Text style={{ color: selectedType === 'expense' ? 'white' : '#2C3E50' }}>Expense</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[
            styles.typeButton,
            { backgroundColor: selectedType === 'income' ? '#4CAF50' : '#FFFFFF' },
          ]}
          onPress={() => setSelectedType('income')}
        >
          <Text style={{ color: selectedType === 'income' ? 'white' : '#2C3E50' }}>Income</Text>
        </TouchableOpacity>
      </View>

      <TextInput
        style={styles.input}
        placeholder="Amount"
        placeholderTextColor="#666666"
        keyboardType="numeric"
        value={newAmount}
        onChangeText={setNewAmount}
      />

      <TextInput
        style={styles.input}
        placeholder="Description"
        placeholderTextColor="#666666"
        value={newDescription}
        onChangeText={setNewDescription}
      />

      {renderCategorySelector()}

      <TouchableOpacity
        style={styles.addButton}
        onPress={addTransaction}
      >
        <Text style={styles.addButtonText}>Add Transaction</Text>
      </TouchableOpacity>
    </View>
  );

  const renderFilterSection = () => (
    <View style={styles.filterSection}>
      <View style={styles.filterHeader}>
        <View style={styles.filterTitleContainer}>
          <MaterialIcons name="filter-alt" size={20} color="#614385" />
          <Text style={styles.filterTitle}>Filter Transactions</Text>
        </View>
        {Object.keys(activeFilters).length > 0 && (
          <TouchableOpacity
            style={styles.clearFiltersButton}
            onPress={() => setActiveFilters({})}
          >
            <MaterialIcons name="refresh" size={16} color="#614385" />
            <Text style={styles.clearFiltersText}>Reset</Text>
          </TouchableOpacity>
        )}
      </View>

      <ScrollView 
        horizontal 
        showsHorizontalScrollIndicator={false}
        style={styles.filterScrollView}
      >
        <View style={styles.filterGroup}>
          <Text style={styles.filterGroupLabel}>Transaction Type</Text>
          <View style={styles.filterChips}>
            <TouchableOpacity
              style={[
                styles.filterChip,
                activeFilters.type === 'expense' && styles.activeFilterChip
              ]}
              onPress={() => setActiveFilters(prev => ({
                ...prev,
                type: prev.type === 'expense' ? undefined : 'expense'
              }))}
            >
              <LinearGradient
                colors={activeFilters.type === 'expense' ? 
                  ['#FF6B6B', '#EE5D5D'] : 
                  ['#FFF', '#FFF']}
                style={styles.filterChipGradient}
                start={{ x: 0, y: 0 }}
                end={{ x: 1, y: 1 }}
              >
                <MaterialIcons
                  name="arrow-downward"
                  size={16}
                  color={activeFilters.type === 'expense' ? 'white' : '#666'}
                />
                <Text style={[
                  styles.filterChipText,
                  activeFilters.type === 'expense' && styles.activeFilterChipText
                ]}>Expenses</Text>
              </LinearGradient>
            </TouchableOpacity>

            <TouchableOpacity
              style={[
                styles.filterChip,
                activeFilters.type === 'income' && styles.activeFilterChip
              ]}
              onPress={() => setActiveFilters(prev => ({
                ...prev,
                type: prev.type === 'income' ? undefined : 'income'
              }))}
            >
              <LinearGradient
                colors={activeFilters.type === 'income' ? 
                  ['#4CAF50', '#43A047'] : 
                  ['#FFF', '#FFF']}
                style={styles.filterChipGradient}
                start={{ x: 0, y: 0 }}
                end={{ x: 1, y: 1 }}
              >
                <MaterialIcons
                  name="arrow-upward"
                  size={16}
                  color={activeFilters.type === 'income' ? 'white' : '#666'}
                />
                <Text style={[
                  styles.filterChipText,
                  activeFilters.type === 'income' && styles.activeFilterChipText
                ]}>Income</Text>
              </LinearGradient>
            </TouchableOpacity>
          </View>
        </View>

        <View style={styles.filterDivider} />

        <View style={styles.filterGroup}>
          <Text style={styles.filterGroupLabel}>Time Period</Text>
          <View style={styles.filterChips}>
            {['today', 'week', 'month', 'all'].map((range) => (
              <TouchableOpacity
                key={range}
                style={[
                  styles.filterChip,
                  activeFilters.dateRange === range && styles.activeFilterChip
                ]}
                onPress={() => setActiveFilters(prev => ({
                  ...prev,
                  dateRange: prev.dateRange === range ? undefined : range as any
                }))}
              >
                <LinearGradient
                  colors={activeFilters.dateRange === range ? 
                    ['#614385', '#516395'] : 
                    ['#FFF', '#FFF']}
                  style={styles.filterChipGradient}
                  start={{ x: 0, y: 0 }}
                  end={{ x: 1, y: 1 }}
                >
                  <MaterialIcons
                    name={
                      range === 'today' ? 'today' :
                      range === 'week' ? 'view-week' :
                      range === 'month' ? 'calendar-today' : 'date-range'
                    }
                    size={16}
                    color={activeFilters.dateRange === range ? 'white' : '#666'}
                  />
                  <Text style={[
                    styles.filterChipText,
                    activeFilters.dateRange === range && styles.activeFilterChipText
                  ]}>{range.charAt(0).toUpperCase() + range.slice(1)}</Text>
                </LinearGradient>
              </TouchableOpacity>
            ))}
          </View>
        </View>
      </ScrollView>
    </View>
  );

  return (
    <ScrollView style={[styles.container, { backgroundColor: theme.colors.background }]}>
      <Animated.View style={[styles.header, { 
        opacity: animation,
        backgroundColor: theme.colors.cardBackground
      }]}>
        <View style={styles.welcomeSection}>
          <Text style={[styles.welcomeText, { color: theme.colors.textSecondary }]}>Welcome back</Text>
          <Text style={[styles.dateText, { color: theme.colors.text }]}>February 2025</Text>
        </View>
        <View style={styles.headerButtons}>
          <TouchableOpacity 
            style={[styles.reportsButton, { backgroundColor: theme.colors.inputBackground }]}
            onPress={() => router.push('/reports')}
          >
            <Feather name="bar-chart-2" size={24} color={theme.colors.text} />
          </TouchableOpacity>
          <TouchableOpacity 
            style={styles.settingsButton}
            onPress={() => router.push('/settings')}
          >
            <Ionicons name="settings-outline" size={24} color={theme.colors.text} />
          </TouchableOpacity>
        </View>
      </Animated.View>

      {/* Balance Card */}
      <Animated.View style={[styles.balanceCardContainer, {
        transform: [{
          scale: animation.interpolate({
            inputRange: [0, 1],
            outputRange: [0.9, 1]
          })
        }]
      }]}>
        <LinearGradient
          colors={[theme.colors.primary, theme.colors.secondary]}
          style={styles.balanceCard}
          start={{ x: 0, y: 0 }}
          end={{ x: 1, y: 1 }}
        >
          <Text style={styles.balanceLabel}>Total Balance</Text>
          <Text style={styles.balanceAmount}>{formatAmount(balance)}</Text>
          <View style={styles.balanceMetrics}>
            <View style={styles.metric}>
              <MaterialIcons name="arrow-upward" size={24} color="#4CAF50" />
              <Text style={styles.metricText}>Income</Text>
              <Text style={styles.metricAmount}>
                {formatAmount(transactions
                  .filter(t => t.type === 'income')
                  .reduce((sum, t) => sum + t.amount, 0)
                )}
              </Text>
            </View>
            <View style={styles.metricDivider} />
            <View style={styles.metric}>
              <MaterialIcons name="arrow-downward" size={24} color="#FF5252" />
              <Text style={styles.metricText}>Expenses</Text>
              <Text style={styles.metricAmount}>
                {formatAmount(transactions
                  .filter(t => t.type === 'expense')
                  .reduce((sum, t) => sum + t.amount, 0)
                )}
              </Text>
            </View>
          </View>
        </LinearGradient>
      </Animated.View>

      {/* Quick Add Transaction */}
      <View style={[styles.quickAdd, { backgroundColor: theme.colors.cardBackground }]}>
        <View style={styles.sectionHeader}>
          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>Quick Add</Text>
        </View>
        {renderAddTransactionForm()}
      </View>

      {/* Categories */}
      <View style={styles.categories}>
        <View style={styles.sectionHeader}>
          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>Categories</Text>
          <TouchableOpacity onPress={() => setShowAllCategories(!showAllCategories)}>
            <Text style={[styles.seeAllText, { color: theme.colors.primary }]}>
              {showAllCategories ? 'Show Less' : 'See All'}
            </Text>
          </TouchableOpacity>
        </View>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          {showAllCategories ? (
            Object.entries(categoryColors).map(([category], index) => {
              const categoryTotal = transactions
                .filter(t => t.category === category)
                .reduce((sum, t) => sum + (t.type === 'income' ? t.amount : -t.amount), 0);

              return (
                <CategoryPill 
                  key={index} 
                  category={category as Category} 
                  amount={Math.abs(categoryTotal)}
                  icon={categoryIcons[category as keyof typeof categoryIcons]} 
                />
              );
            })
          ) : (
            <>
              {['Restaurants', 'Entertainment', 'Shopping', 'Transport', 'Groceries', 'Other'].map((category) => {
                const categoryTotal = transactions
                  .filter(t => t.category === category)
                  .reduce((sum, t) => sum + (t.type === 'income' ? t.amount : -t.amount), 0);

                return (
                  <CategoryPill 
                    key={category}
                    category={category as Category}
                    amount={Math.abs(categoryTotal)}
                    icon={categoryIcons[category as keyof typeof categoryIcons]}
                  />
                );
              })}
            </>
          )}
        </ScrollView>
      </View>

      {/* Recent Transactions */}
      <View style={[styles.transactions, { backgroundColor: theme.colors.cardBackground }]}>
        <View style={styles.sectionHeader}>
          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>Recent Transactions</Text>
          <View style={styles.headerActions}>
            <TouchableOpacity 
              style={[
                styles.filterButton,
                showFilters && styles.activeFilterButton
              ]}
              onPress={() => setShowFilters(!showFilters)}
            >
              <MaterialIcons 
                name="filter-list" 
                size={20} 
                color={showFilters ? '#614385' : '#666'}
              />
              {Object.keys(activeFilters).length > 0 && (
                <View style={styles.filterBadge}>
                  <Text style={styles.filterBadgeText}>
                    {Object.keys(activeFilters).length}
                  </Text>
                </View>
              )}
            </TouchableOpacity>
            <TouchableOpacity onPress={() => router.push('/transactions')}>
              <Text style={[styles.seeAllText, { color: theme.colors.primary }]}>See All</Text>
            </TouchableOpacity>
          </View>
        </View>

        {showFilters && renderFilterSection()}
        
        {getFilteredTransactions().map(transaction => (
          <TouchableOpacity key={transaction.id} style={styles.transaction}>
            <View style={[styles.transactionIcon, { backgroundColor: transaction.type === 'income' ? '#4CAF5022' : '#FF525222' }]}>
              <MaterialIcons
                name={transaction.type === 'income' ? 'arrow-upward' : 'arrow-downward'}
                size={24}
                color={transaction.type === 'income' ? '#4CAF50' : '#FF5252'}
              />
            </View>
            <View style={styles.transactionDetails}>
              <Text style={styles.transactionDescription}>{transaction.description}</Text>
              <Text style={styles.transactionCategory}>{transaction.category}</Text>
            </View>
            <View style={styles.transactionAmount}>
              <Text
                style={[
                  styles.amount,
                  { color: transaction.type === 'income' ? '#4CAF50' : '#FF5252' }
                ]}
              >
                {transaction.type === 'income' ? '+' : '-'}
                {formatAmount(transaction.amount)}
              </Text>
              <Text style={styles.date}>{formatDate(transaction.date)}</Text>
            </View>
          </TouchableOpacity>
        ))}
      </View>
    </ScrollView>
  );
};

export default FinanceDashboard;

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  addTransactionForm: {
    width: '100%',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingTop: 20,
    paddingBottom: 10,
  },
  welcomeSection: {},
  welcomeText: {
    fontSize: 16,
  },
  dateText: {
    fontSize: 20,
    fontWeight: 'bold',
    marginTop: 4,
  },
  headerButtons: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  reportsButton: {
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 20,
  },
  settingsButton: {
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
  },
  balanceCardContainer: {
    margin: 20,
    borderRadius: 24,
    elevation: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
  },
  balanceCard: {
    padding: 24,
    borderRadius: 24,
  },
  balanceLabel: {
    fontSize: 16,
    opacity: 0.9,
  },
  balanceAmount: {
    fontSize: 40,
    fontWeight: 'bold',
    marginVertical: 12,
  },
  balanceMetrics: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 20,
    backgroundColor: 'rgba(255,255,255,0.1)',
    borderRadius: 16,
    padding: 16,
  },
  metric: {
    flex: 1,
    alignItems: 'center',
  },
  metricDivider: {
    width: 1,
    backgroundColor: 'rgba(255,255,255,0.2)',
    marginHorizontal: 16,
  },
  metricText: {
    fontSize: 14,
    opacity: 0.9,
    marginTop: 4,
  },
  metricAmount: {
    fontSize: 16,
    fontWeight: 'bold',
    marginTop: 4,
  },
  quickAdd: {
    margin: 20,
    padding: 20,
    borderRadius: 24,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  seeAllText: {
    fontSize: 14,
    fontWeight: '600',
  },
  typeSelector: {
    flexDirection: 'row',
    marginBottom: 16,
    padding: 4,
    borderRadius: 12,
  },
  typeButton: {
    flex: 1,
    padding: 12,
    alignItems: 'center',
    borderRadius: 8,
    marginHorizontal: 4,
  },
  selectedType: {
    backgroundColor: '#614385',
  },
  typeText: {
    color: '#666',
  },
  selectedTypeText: {
    color: '#fff',
  },
  input: {
    padding: 12,
    borderRadius: 8,
    marginBottom: 12,
    fontSize: 16,
  },
  addButton: {
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
  },
  addButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  categories: {
    margin: 20,
  },
  categoryPill: {
    padding: 16,
    borderRadius: 16,
    marginRight: 12,
    minWidth: 140,
  },
  categoryIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 8,
  },
  categoryText: {
    fontSize: 14,
    fontWeight: 'bold',
    opacity: 0.9,
  },
  categoryAmount: {
    fontSize: 20,
    fontWeight: 'bold',
    marginTop: 4,
  },
  categorySelector: {
    marginBottom: 16,
  },
  categoryList: {
    flexDirection: 'row',
  },
  categoryOption: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    borderRadius: 8,
    marginRight: 8,
    borderWidth: 1,
  },
  categoryOptionText: {
    marginLeft: 8,
    fontSize: 14,
    fontWeight: '600',
  },
  transactions: {
    margin: 20,
    padding: 20,
    borderRadius: 24,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
  },
  transaction: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 16,
    borderBottomWidth: 1,
  },
  transactionIcon: {
    width: 48,
    height: 48,
    borderRadius: 24,
    alignItems: 'center',
    justifyContent: 'center',
  },
  transactionDetails: {
    flex: 1,
    marginLeft: 16,
  },
  transactionDescription: {
    fontSize: 16,
    fontWeight: '600',
  },
  transactionCategory: {
    fontSize: 14,
  },
  transactionAmount: {
    alignItems: 'flex-end',
  },
  amount: {
    fontSize: 16,
    fontWeight: '600',
  },
  date: {
    fontSize: 12,
    marginTop: 4,
  },
  headerActions: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  filterButton: {
    padding: 8,
    borderRadius: 8,
    flexDirection: 'row',
    alignItems: 'center',
  },
  activeFilterButton: {
    backgroundColor: '#F0F2F5',
  },
  filterBadge: {
    position: 'absolute',
    top: -4,
    right: -4,
    borderRadius: 10,
    minWidth: 20,
    height: 20,
    alignItems: 'center',
    justifyContent: 'center',
  },
  filterBadgeText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  filterSection: {
    marginTop: 12,
    marginBottom: 16,
    borderRadius: 20,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 8,
    elevation: 2,
  },
  filterHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  filterTitleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  filterTitle: {
    fontSize: 16,
    fontWeight: '600',
  },
  clearFiltersButton: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 20,
  },
  clearFiltersText: {
    fontSize: 12,
    fontWeight: '600',
  },
  filterScrollView: {
    marginHorizontal: -16,
    paddingHorizontal: 16,
  },
  filterGroup: {
    marginRight: 24,
  },
  filterDivider: {
    width: 1,
    marginHorizontal: 12,
    alignSelf: 'stretch',
  },
  filterGroupLabel: {
    fontSize: 12,
    fontWeight: '600',
    marginBottom: 12,
    textTransform: 'uppercase',
    letterSpacing: 0.5,
  },
  filterChips: {
    flexDirection: 'row',
    gap: 8,
  },
  filterChip: {
    borderRadius: 20,
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  filterChipGradient: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
    paddingHorizontal: 16,
    paddingVertical: 10,
  },
  activeFilterChip: {
    transform: [{ scale: 1.05 }],
  },
  filterChipText: {
    fontSize: 14,
    fontWeight: '600',
  },
  activeFilterChipText: {
    color: 'white',
  },
});
